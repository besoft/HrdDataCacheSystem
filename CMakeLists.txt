cmake_minimum_required(VERSION 3.9)

#-----------------------------------------------------------------------------
# limit the number of configurations to Debug and Release only
# must go before the project command
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Configs" FORCE)
if(DEFINED CMAKE_BUILD_TYPE AND CMAKE_VERSION VERSION_GREATER "2.8")
  set_property( CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${CMAKE_CONFIGURATION_TYPES} )
endif()

#-----------------------------------------------------------------------------
# Inform the CMAKE about our custom CMake modules and macros
LIST( APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" )


project(hrdDataCache)

#-----------------------------------------------------------------------------
# Check if the chosen compiler is OK
# Minimum compiler version check: GCC >= 4.6
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND
    CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.6)
  message(FATAL_ERROR "GCC 4.6 or later is required.")
endif ()

# Minimum compiler version check: LLVM Clang >= 3.0
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND
    CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.0)
  message(FATAL_ERROR "LLVM Clang 3.0 or later is required.")
endif ()

# Minimum compiler version check: Apple Clang >= 3.0 (Xcode 4.2)
if (CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" AND
    CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.0)
  message(FATAL_ERROR "Apple Clang 3.0 or later is required.")
endif ()

# Minimum compiler version check: Microsoft C/C++ >= 17.0 (aka VS 2012 aka VS 11.0)
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC" AND
    CMAKE_CXX_COMPILER_VERSION VERSION_LESS 17.0)
  message(FATAL_ERROR "Microsoft Visual Studio 2012 or later is required.")
endif ()

# Minimum compiler version check: Intel C++ (ICC) >= 14
if (CMAKE_CXX_COMPILER_ID STREQUAL "Intel" AND
    CMAKE_CXX_COMPILER_VERSION VERSION_LESS 14.0)
  message(FATAL_ERROR "Intel C++ (ICC) 14.0 or later is required.")
endif ()

#-----------------------------------------------------------------------------
# Make sure we have C++11 enabled.
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_EXTENSIONS False)

#-------------------------------------------------------------------------------
# Add common cmake options




SET(hrdDataCacheGENERATED_FILE_WARNING "\
// WARNING: this file is automatically generated by CMake.\n\
// Any changes done to this file will be lost the next time CMake runs.\n\
// Use .in file to do the required modifications and rerun CMake.\
 ")



#-------------------------------------------------------------------------------
# Set common compiler and linker settings
# if this is the first run of the cmake configure, we will force the settings
# so that the user will see it in the GUI and can modify it according to their wishes
if (NOT CXX_FLAGS_CONFIGURED_ONCE)
  IF (MSVC)
	#if the compiler is Microsoft Visual C++ (expected), add some special compiler options
	#add support for VS Edit & Continue for Debug version and creating debug information for release
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /ZI /MP" CACHE STRING "Flags used by the compiler during the debug builds." FORCE)
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MP")
	SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}" CACHE STRING "Flags used by the linker during the release builds." FORCE)
	SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}" CACHE STRING "Flags used by the linker during the release builds." FORCE)
	
	#optimization flags
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /arch:AVX /Gy /Oi /Oy /Ox /GS-" CACHE STRING "Flags used by the compiler during the release builds." FORCE)
  ENDIF()

  set(BINARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Bin" CACHE PATH "The directory where to place the output binaries." FORCE)

  set(CXX_FLAGS_CONFIGURED_ONCE TRUE CACHE INTERNAL "A flag showing that CMake has configured this at least once.")
endif()


set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${BINARY_OUTPUT_DIRECTORY})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${BINARY_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BINARY_OUTPUT_DIRECTORY})

foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${BINARY_OUTPUT_DIRECTORY} )
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${BINARY_OUTPUT_DIRECTORY} )
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${BINARY_OUTPUT_DIRECTORY} )
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

if(NOT CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX d)
endif()


#--------------------------------------------------------------------------------
# Configure subprojects

add_subdirectory(CacheSystem)
set(DOXY_SRC_DIRS CacheSystem)

OPTION(BUILD_VTK_WRAPPER "Build the wrapper for VTK toolkit" ON)
if (BUILD_VTK_WRAPPER)

#----------
# Find VTK

find_package(VTK REQUIRED)
include(${VTK_USE_FILE})
include_directories(SYSTEM ${VTK_INCLUDE_DIRS})



  add_subdirectory(CacheSystemVtkWrapper)
  list(APPEND DOXY_SRC_DIRS CacheSystemVtkWrapper)
endif()

OPTION(BUILD_SAMPLES "Build samples" OFF)
if (BUILD_SAMPLES)
  add_subdirectory(Samples)
endif()

#---------------------------
# Do we want to build the documentation?
option(BUILD_DOC "Build documentation using Doxygen" OFF)
if (BUILD_DOC)
   find_package(Doxygen)
   if(NOT DOXYGEN_FOUND)
         message(FATAL_ERROR "Doxygen is needed to build the documentation. Disable building documentation or download and install Doxygen from http://www.doxygen.org/.")
    elseif(NOT DOXYGEN_DOT_FOUND)
	 message(STATUS "RECOMMENDATION: Download and install GraphViz Dot to be used within Doxygen. You can download it from http://www.graphviz.org/.")
    endif()

   #
   # Configure the script and the doxyfile, then add target
   #
   
   doxygen_add_docs(doxygen ${DOXY_SRC_DIRS} COMMENT "Generate HTML pages")
endif()
